setwd("~/")
#!/usr/bin/env Rscript
#------------------------------------------------------------------------------#
#                             PhyloReconcile                                   #
#                                                                              #
#          Script - NANUQ Simplex Plots for Multiple Phylogenies               #
#                                                                              #
#------------------------------------------------------------------------------#
#load libraries
library('MSCquartets')
library('ape')
# Set paths - keeping your original paths
BASE_DIR="$(pwd)/PhyloReconcile"
MTDNA_PHYLO="${BASE_DIR}/02_phylogenies/02a_mtDNA_phylogeny/trees/MtDNA_concat.tree"
NUDNA_PHYLO="${BASE_DIR}/02_phylogenies/01b_30AX_ML_ASTRAL/30AX_ASTRAL_ML_species.tree"
MSYDNA_PHYLO="${BASE_DIR}/02_phylogenies/02b_MSY_phylogeny/trees/MSY_concatenation.tree"
GENETREES_MTDNA="${BASE_DIR}/02_phylogenies/02a_mtDNA_phylogeny/MtDNA_loci.treefile"
GENETREES_NUDNA="${BASE_DIR}/02_phylogenies/01b_30AX_ML_ASTRAL/ml_best.trees"
GENETREES_MSYDNA="${BASE_DIR}/02_phylogenies/02b_MSY_phylogeny/Yloci.treefile"
MSC_RESULTS="${BASE_DIR}/07_MSC_Analyses"
# Create necessary directories for each phylogeny type
MTDNA_DIR="${MSC_RESULTS}/mtDNA_results"
NUDNA_DIR="${MSC_RESULTS}/nuDNA_results"
MSYDNA_DIR="${MSC_RESULTS}/msyDNA_results"
dir.create(MTDNA_DIR, recursive = TRUE, showWarnings = FALSE)
dir.create(NUDNA_DIR, recursive = TRUE, showWarnings = FALSE)
dir.create(MSYDNA_DIR, recursive = TRUE, showWarnings = FALSE)
#load trees
mtDNA_tree <- read.tree(MTDNA_PHYLO)
setwd("~/")
load libraries
#load libraries
library('MSCquartets')
library('ape')
# Set paths - using R's file.path for proper path construction
# Get the current working directory as base
BASE_DIR <- file.path(getwd(), "PhyloReconcile")
MTDNA_PHYLO <- file.path(BASE_DIR, "02_phylogenies", "02a_mtDNA_phylogeny", "trees", "MtDNA_concat.tree")
NUDNA_PHYLO <- file.path(BASE_DIR, "02_phylogenies", "01b_30AX_ML_ASTRAL", "30AX_ASTRAL_ML_species.tree")
MSYDNA_PHYLO <- file.path(BASE_DIR, "02_phylogenies", "02b_MSY_phylogeny", "trees", "MSY_concatenation.tree")
GENETREES_MTDNA <- file.path(BASE_DIR, "02_phylogenies", "02a_mtDNA_phylogeny", "MtDNA_loci.treefile")
GENETREES_NUDNA <- file.path(BASE_DIR, "02_phylogenies", "01b_30AX_ML_ASTRAL", "ml_best.trees")
GENETREES_MSYDNA <- file.path(BASE_DIR, "02_phylogenies", "02b_MSY_phylogeny", "Yloci.treefile")
MSC_RESULTS <- file.path(BASE_DIR, "07_MSC_Analyses")
# Create necessary directories for each phylogeny type
MTDNA_DIR <- file.path(MSC_RESULTS, "mtDNA_results")
NUDNA_DIR <- file.path(MSC_RESULTS, "nuDNA_results")
MSYDNA_DIR <- file.path(MSC_RESULTS, "msyDNA_results")
# Ensure results directory exists before creating subdirectories
dir.create(MSC_RESULTS, recursive = TRUE, showWarnings = FALSE)
dir.create(MTDNA_DIR, recursive = TRUE, showWarnings = FALSE)
dir.create(NUDNA_DIR, recursive = TRUE, showWarnings = FALSE)
dir.create(MSYDNA_DIR, recursive = TRUE, showWarnings = FALSE)
#load libraries
library('MSCquartets')
library('ape')
# Set paths - using R's file.path for proper path construction
# Get the current working directory as base
BASE_DIR <- file.path(getwd(), "PhyloReconcile")
MTDNA_PHYLO <- file.path(BASE_DIR, "02_phylogenies", "02a_mtDNA_phylogeny", "trees", "MtDNA_concat.tree")
NUDNA_PHYLO <- file.path(BASE_DIR, "02_phylogenies", "01b_30AX_ML_ASTRAL", "30AX_ASTRAL_ML_species.tree")
MSYDNA_PHYLO <- file.path(BASE_DIR, "02_phylogenies", "02b_MSY_phylogeny", "trees", "MSY_concatenation.tree")
GENETREES_MTDNA <- file.path(BASE_DIR, "02_phylogenies", "02a_mtDNA_phylogeny", "MtDNA_loci.treefile")
GENETREES_NUDNA <- file.path(BASE_DIR, "02_phylogenies", "01b_30AX_ML_ASTRAL", "ml_best.trees")
GENETREES_MSYDNA <- file.path(BASE_DIR, "02_phylogenies", "02b_MSY_phylogeny", "Yloci.treefile")
MSC_RESULTS <- file.path(BASE_DIR, "07_MSCquartet_Analyses")
# Create necessary directories for each phylogeny type
MTDNA_DIR <- file.path(MSC_RESULTS, "mtDNA_results")
NUDNA_DIR <- file.path(MSC_RESULTS, "nuDNA_results")
MSYDNA_DIR <- file.path(MSC_RESULTS, "msyDNA_results")
# Ensure results directory exists before creating subdirectories
dir.create(MSC_RESULTS, recursive = TRUE, showWarnings = FALSE)
dir.create(MTDNA_DIR, recursive = TRUE, showWarnings = FALSE)
dir.create(NUDNA_DIR, recursive = TRUE, showWarnings = FALSE)
dir.create(MSYDNA_DIR, recursive = TRUE, showWarnings = FALSE)
# Load trees
cat("Loading phylogenetic trees...\n")
mtDNA_tree <- read.tree(MTDNA_PHYLO)
nuDNA_tree <- read.tree(NUDNA_PHYLO)
msyDNA_tree <- read.tree(MSYDNA_PHYLO)
# Load gene trees
cat("Loading gene trees...\n")
gtrees_mtDNA <- read.tree(GENETREES_MTDNA)
gtrees_nuDNA <- read.tree(GENETREES_NUDNA)
gtrees_msyDNA <- read.tree(GENETREES_MSYDNA)
# Helper function to process each phylogeny
process_phylogeny <- function(gtrees, species_tree, output_prefix, output_dir) {
# Get species names from the species tree
species_names <- species_tree$tip.label
# Create quartet table
cat("Creating quartet table for", output_prefix, "\n")
b <- quartetTable(gtrees, taxonnames = species_names, random = 0)
b <- b[rowSums(b) != 4, colSums(b) != 0] # Edit it to look the way we want for snaq
# Save the quartet file
quartet_file <- file.path(output_dir, paste0(output_prefix, "_fullspeciesCFs.csv"))
write.csv(b, quartet_file, row.names = FALSE)
# Rename columns for NANUQ
u <- read.csv(quartet_file)
colnames(u)[dim(u)[2]-2] = "12|34"
colnames(u)[dim(u)[2]-1] = "13|24"
colnames(u)[dim(u)[2]] = "14|23"
# Define significance levels to test
alpha_levels <- c(0.01, 0.001, 1e-4, 1e-6)
beta <- 0.95  # Fixed beta value as requested
# Run NANUQ for each significance level
for (alpha in alpha_levels) {
cat("Running NANUQ for", output_prefix, "with alpha =", alpha, "\n")
# Output file name includes the significance level
outfile_name <- file.path(output_dir, paste0(output_prefix, "_alpha_", format(alpha, scientific = TRUE)))
# Run NANUQ with the specific parameters
z <- NANUQ(as.matrix(u),
outfile = outfile_name,
plot = TRUE,
alpha = alpha,
beta = beta)
# Print information about the results
cat("NANUQ analysis completed for", output_prefix, "with alpha =", alpha, "\n")
cat("Number of quartets analyzed:", nrow(u), "\n")
cat("Output saved to:", outfile_name, "\n\n")
}
return(TRUE)
}
# Process each phylogeny type
cat("\n=== Processing mtDNA Phylogeny ===\n")
process_phylogeny(gtrees_mtDNA, mtDNA_tree, "mtDNA", MTDNA_DIR)
setwd("~/")
# Load required libraries
library(ape)
library(phangorn)
library(MSCquartets)
# Set group name
group <- "Tragelaphini"
# Setup directory structure
BASE_DIR <- file.path(getwd(), "PhyloReconcile")
MSC_RESULTS <- file.path(BASE_DIR, "07_Network_Analyses")
group_dir <- file.path(MSC_RESULTS, group)
# Load quartet frequency table
cf_file <- file.path(group_dir, paste0(group, "_fullspeciesCFs.csv"))
quartet_data <- read.csv(cf_file)
# Ensure column names are correct for NANUQ format
colnames(quartet_data)[ncol(quartet_data)-2] <- "12|34"
colnames(quartet_data)[ncol(quartet_data)-1] <- "13|24"
colnames(quartet_data)[ncol(quartet_data)] <- "14|23"
# Initialize results dataframe
results <- data.frame(
network = character(),
likelihood = numeric(),
gof_stat = numeric(),
gof_pvalue = numeric(),
stringsAsFactors = FALSE
)
# Calculate scores for NANUQ with alpha=0.05
cat("\nProcessing NANUQ alpha=0.05\n")
nanuq05_file <- file.path(group_dir, paste0(group, "_alpha0.05.tre"))
if (file.exists(nanuq05_file)) {
nanuq05_tree <- read.tree(nanuq05_file)
# Calculate pseudo-likelihood
nanuq05_loglik <- MLE_of_network(nanuq05_tree, quartet_data)
# Calculate goodness of fit
nanuq05_gof <- network_goodness_of_fit(nanuq05_tree, quartet_data)
# Add to results
results <- rbind(results, data.frame(
network = "NANUQ_alpha0.05",
likelihood = nanuq05_loglik$loglik,
gof_stat = nanuq05_gof$statistic,
gof_pvalue = nanuq05_gof$p.value
))
cat("NANUQ alpha=0.05 Log-likelihood:", nanuq05_loglik$loglik, "\n")
cat("NANUQ alpha=0.05 GoF p-value:", nanuq05_gof$p.value, "\n")
} else {
cat("NANUQ alpha=0.05 file not found:", nanuq05_file, "\n")
}
# Calculate scores for NANUQ with alpha=0.01
cat("\nProcessing NANUQ alpha=0.01\n")
nanuq01_file <- file.path(group_dir, paste0(group, "_alpha0.01.tre"))
if (file.exists(nanuq01_file)) {
nanuq01_tree <- read.tree(nanuq01_file)
# Calculate pseudo-likelihood
nanuq01_loglik <- MLE_of_network(nanuq01_tree, quartet_data)
# Calculate goodness of fit
nanuq01_gof <- network_goodness_of_fit(nanuq01_tree, quartet_data)
# Add to results
results <- rbind(results, data.frame(
network = "NANUQ_alpha0.01",
likelihood = nanuq01_loglik$loglik,
gof_stat = nanuq01_gof$statistic,
gof_pvalue = nanuq01_gof$p.value
))
cat("NANUQ alpha=0.01 Log-likelihood:", nanuq01_loglik$loglik, "\n")
cat("NANUQ alpha=0.01 GoF p-value:", nanuq01_gof$p.value, "\n")
} else {
cat("NANUQ alpha=0.01 file not found:", nanuq01_file, "\n")
}
# Save results
results_file <- file.path(group_dir, paste0(group, "_nanuq_scores.csv"))
write.csv(results, results_file, row.names = FALSE)
cat("\nResults saved to:", results_file, "\n")
# Load required libraries
library(ape)
library(phangorn)
library(MSCquartets)
# Set group name
group <- "Tragelaphini"
# Setup directory structure
BASE_DIR <- file.path(getwd(), "PhyloReconcile")
MSC_RESULTS <- file.path(BASE_DIR, "07_Network_Analyses")
group_dir <- file.path(MSC_RESULTS, group)
# Load quartet frequency table
cf_file <- file.path(group_dir, paste0(group, "_fullspeciesCFs.csv"))
quartet_data <- read.csv(cf_file)
# Ensure column names are correct for NANUQ format
colnames(quartet_data)[ncol(quartet_data)-2] <- "12|34"
colnames(quartet_data)[ncol(quartet_data)-1] <- "13|24"
colnames(quartet_data)[ncol(quartet_data)] <- "14|23"
# Initialize results dataframe
results <- data.frame(
network = character(),
likelihood = numeric(),
gof_stat = numeric(),
gof_pvalue = numeric(),
stringsAsFactors = FALSE
)
# Calculate scores for NANUQ with alpha=0.05
cat("\nProcessing NANUQ alpha=0.05\n")
nanuq05_file <- file.path(group_dir, "Tragelaphini_alpha0.05_beta0.95.nex")
if (file.exists(nanuq05_file)) {
# Read as distance matrix and build tree
nanuq05_dist <- read.nexus.dist(nanuq05_file)
nanuq05_tree <- nj(nanuq05_dist)
# Calculate pseudo-likelihood
nanuq05_loglik <- MLE_of_network(nanuq05_tree, quartet_data)
# Calculate goodness of fit
nanuq05_gof <- network_goodness_of_fit(nanuq05_tree, quartet_data)
# Add to results
results <- rbind(results, data.frame(
network = "NANUQ_alpha0.05",
likelihood = nanuq05_loglik$loglik,
gof_stat = nanuq05_gof$statistic,
gof_pvalue = nanuq05_gof$p.value
))
cat("NANUQ alpha=0.05 Log-likelihood:", nanuq05_loglik$loglik, "\n")
cat("NANUQ alpha=0.05 GoF p-value:", nanuq05_gof$p.value, "\n")
} else {
cat("NANUQ alpha=0.05 file not found:", nanuq05_file, "\n")
}
# Load required libraries
library(MSCquartets)
library(ape)
# Set parameters
group <- "Tragelaphini"
BASE_DIR <- file.path(getwd(), "PhyloReconcile")
MSC_RESULTS <- file.path(BASE_DIR, "07_Network_Analyses")
group_dir <- file.path(MSC_RESULTS, group)
# Define the quartet data file
cf_file <- file.path(group_dir, paste0(group, "_fullspeciesCFs.csv"))
# Load the quartet data
cat("Loading quartet data from:", cf_file, "\n")
quartet_data <- read.csv(cf_file)
# Ensure column names are correct for NANUQ format
colnames(quartet_data)[ncol(quartet_data)-2] <- "12|34"
colnames(quartet_data)[ncol(quartet_data)-1] <- "13|24"
colnames(quartet_data)[ncol(quartet_data)] <- "14|23"
# Initialize results dataframe
results <- data.frame(
network = character(),
likelihood = numeric(),
gof_stat = numeric(),
gof_pvalue = numeric(),
stringsAsFactors = FALSE
)
# Run NANUQ with alpha=0.05 and calculate scores
cat("\nRunning NANUQ with alpha=0.05\n")
z_05 <- NANUQ(as.matrix(quartet_data),
outfile = paste0(group, "_alpha0.05"),
alpha = 0.05,
beta = 0.95,
plot = TRUE)
# Calculate pseudo-likelihood for alpha=0.05
loglik_05 <- MLE_of_network(z_05$tree, quartet_data)
# Load required libraries
library(MSCquartets)
library(ape)
# Set parameters
group <- "Tragelaphini"
BASE_DIR <- file.path(getwd(), "PhyloReconcile")
MSC_RESULTS <- file.path(BASE_DIR, "07_Network_Analyses")
group_dir <- file.path(MSC_RESULTS, group)
# Define the quartet data file
cf_file <- file.path(group_dir, paste0(group, "_fullspeciesCFs.csv"))
# Load the quartet data
cat("Loading quartet data from:", cf_file, "\n")
quartet_data <- read.csv(cf_file)
# Ensure column names are correct for NANUQ format
colnames(quartet_data)[ncol(quartet_data)-2] <- "12|34"
colnames(quartet_data)[ncol(quartet_data)-1] <- "13|24"
colnames(quartet_data)[ncol(quartet_data)] <- "14|23"
# Initialize results dataframe
results <- data.frame(
network = character(),
gof_stat = numeric(),
gof_pvalue = numeric(),
stringsAsFactors = FALSE
)
# Run NANUQ with alpha=0.05 and calculate scores
cat("\nRunning NANUQ with alpha=0.05\n")
z_05 <- NANUQ(as.matrix(quartet_data),
outfile = paste0(group, "_alpha0.05"),
alpha = 0.05,
beta = 0.95,
plot = TRUE)
# Calculate goodness of fit for alpha=0.05
# The tree is already built to optimize the likelihood in NANUQ
gof_05 <- quartetTreeTestStat(z_05$tree, quartet_data)
# Load required libraries
library(MSCquartets)
library(ape)
# Set parameters
group <- "Tragelaphini"
BASE_DIR <- file.path(getwd(), "PhyloReconcile")
MSC_RESULTS <- file.path(BASE_DIR, "07_Network_Analyses")
group_dir <- file.path(MSC_RESULTS, group)
# Define the quartet data file
cf_file <- file.path(group_dir, paste0(group, "_fullspeciesCFs.csv"))
# Load the quartet data
cat("Loading quartet data from:", cf_file, "\n")
quartet_data <- read.csv(cf_file)
# Ensure column names are correct for NANUQ format
colnames(quartet_data)[ncol(quartet_data)-2] <- "12|34"
colnames(quartet_data)[ncol(quartet_data)-1] <- "13|24"
colnames(quartet_data)[ncol(quartet_data)] <- "14|23"
# Initialize results dataframe
results <- data.frame(
network = character(),
score = numeric(),
stringsAsFactors = FALSE
)
# Run NANUQ with alpha=0.05 and calculate scores
cat("\nRunning NANUQ with alpha=0.05\n")
z_05 <- NANUQ(as.matrix(quartet_data),
outfile = paste0(group, "_alpha0.05"),
alpha = 0.05,
beta = 0.95,
plot = TRUE)
# Get the score from z_05 directly
cat("NANUQ alpha=0.05 score:", z_05$score, "\n")
# Add to results
results <- rbind(results, data.frame(
network = "NANUQ_alpha0.05",
score = z_05$score
))
library(MSCquartets)
library(ape)
# Set parameters
group <- "Tragelaphini"
BASE_DIR <- file.path(getwd(), "PhyloReconcile")
MSC_RESULTS <- file.path(BASE_DIR, "07_Network_Analyses")
group_dir <- file.path(MSC_RESULTS, group)
# Define the quartet data file
cf_file <- file.path(group_dir, paste0(group, "_fullspeciesCFs.csv"))
# Load the quartet data
cat("Loading quartet data from:", cf_file, "\n")
quartet_data <- read.csv(cf_file)
# Ensure column names are correct for NANUQ format
colnames(quartet_data)[ncol(quartet_data)-2] <- "12|34"
colnames(quartet_data)[ncol(quartet_data)-1] <- "13|24"
colnames(quartet_data)[ncol(quartet_data)] <- "14|23"
# Run NANUQ with alpha=0.05
cat("\nRunning NANUQ with alpha=0.05\n")
z_05 <- NANUQ(as.matrix(quartet_data),
outfile = paste0(group, "_alpha0.05"),
alpha = 0.05,
beta = 0.95,
plot = TRUE)
# Examine the structure of z_05
cat("\nNames of elements in z_05:\n")
print(names(z_05))
cat("\nStructure of z_05:\n")
str(z_05)
# Save the tree
tree_file_05 <- file.path(group_dir, paste0(group, "_alpha0.05.tre"))
write.tree(z_05$tree, file=tree_file_05)
# 1. Load required libraries
library('MSCquartets')
library('ape')
library('gtools')
library('stringr')
# 2. Set the group to analyze
group = "Bovina" # Name of the group (based on input files and directory, eg. Tragelaphini)
# 3. Setup directory structure
BASE_DIR <- file.path(getwd(), "PhyloReconcile")
NUDNA_PHYLO <- file.path(BASE_DIR, "02_phylogenies", "01b_30AX_ML_ASTRAL", "30AX_ASTRAL_ML_species.tree")
GENETREES_NUDNA <- file.path(BASE_DIR, "02_phylogenies", "01b_30AX_ML_ASTRAL", "ml_best.trees")
INPUTS <- file.path(BASE_DIR, "01_initial_data", "input_files", "SNaQ_NANUQ")
MSC_RESULTS <- file.path(BASE_DIR, "08_Network_Analyses")
# 4. Create results directory based on group name
group_dir <- file.path(MSC_RESULTS, group)
if (!dir.exists(group_dir)) {
dir.create(group_dir, recursive = TRUE)
}
# 5. Load input files
# Move to the input directory where our text files are located
setwd(INPUTS)
species <- read.delim(paste0(group, "_species.txt"), header = FALSE)
indivs <- read.delim(paste0(group, "_individuals.txt"), header = FALSE)
outgroup <- species[length(species)]
# Extract names from first columns
species_names <- species[[1]]
individual_names <- indivs[[1]]
# 6. Load phylogenetic trees
clade_tree <- read.tree(NUDNA_PHYLO)
gtrees_ind <- read.tree(GENETREES_NUDNA)
# 7. Create quartet table
b <- quartetTable(gtrees_ind, taxonnames = individual_names, random = 0)
b <- b[rowSums(b) != 4, colSums(b) != 0]
# 8. Create the quartet file for SNaQ
x <- b
y <- matrix(rep(0, dim(x)[1] * 8), ncol = 8, nrow = dim(x)[1])
colnames(y) <- c("t1", "t2", "t3", "t4", "CF12_34", "CF13_24", "CF14_23", "ngenes")
for(i in 1:dim(x)[1]) {
count = 0
for(j in 1:dim(x)[2]) {
if(x[i,j] == 1) {
count = count + 1
y[i, count] = colnames(x)[j]
}
}
y[i, "ngenes"] = x[i, dim(x)[2] - 2] + x[i, dim(x)[2] - 1] + x[i, dim(x)[2]]
y[i, "CF12_34"] = as.numeric(x[i, dim(x)[2] - 2]) / as.numeric(y[i, "ngenes"])
y[i, "CF13_24"] = as.numeric(x[i, dim(x)[2] - 1]) / as.numeric(y[i, "ngenes"])
y[i, "CF14_23"] = as.numeric(x[i, dim(x)[2]]) / as.numeric(y[i, "ngenes"])
}
# 9. Write output files to the group-specific directory
setwd(group_dir)
write.csv(y, paste0(group, "_individualsCFs.csv"), row.names = FALSE)
# 10. Process the species tree
tree_new <- keep.tip(clade_tree, species_names)
tree_new$edge.length <- NULL
tree_new$node.label <- NULL
# 11. Write the final tree file
write.tree(tree_new, paste0(group, ".tre"))
# Print completion message
cat("Analysis completed for group:", group, "\n")
cat("Results saved to:", group_dir, "\n")
# 1. Load required libraries
library('MSCquartets')
library('ape')
# 2. Set parameters
group = "Cervidae" # Name of group and Director
alpha = 0.05 # Significance/alpha level
# 3. Setup directory structure
BASE_DIR <- file.path(getwd(), "PhyloReconcile")
NUDNA_PHYLO <- file.path(BASE_DIR, "02_phylogenies", "01b_30AX_ML_ASTRAL", "30AX_ASTRAL_ML_species.tree")
GENETREES_NUDNA <- file.path(BASE_DIR, "02_phylogenies", "01b_30AX_ML_ASTRAL", "ml_best.trees")  # Using NUDNA as specified
MTDNA_PHYLO <- file.path(BASE_DIR, "02_phylogenies", "02a_mtDNA_phylogeny", "trees", "MtDNA_concat.tree" )
GENETREES_MTDNA <- file.path(BASE_DIR, "02_phylogenies", "02a_mtDNA_phylogeny", "MtDNA_loci.treefile")  # Using NUDNA as specified
INPUTS <- file.path(BASE_DIR, "01_initial_data", "input_files", "SNaQ_NANUQ")
MSC_RESULTS <- file.path(BASE_DIR, "09_Network_Analyses")
# 4. Create/navigate to results directory based on group name
group_dir <- file.path(MSC_RESULTS, group)
if (!dir.exists(group_dir)) {
dir.create(group_dir, recursive = TRUE)
}
# 5. Load input files
setwd(INPUTS)
species <- read.delim(paste0(group, "_species.txt"), header = FALSE)
# 1. Load required libraries
library('MSCquartets')
library('ape')
# 2. Set parameters
group = "Cervidae" # Name of group and Director
alpha = 0.05 # Significance/alpha level
# 3. Setup directory structure
BASE_DIR <- file.path(getwd(), "PhyloReconcile")
NUDNA_PHYLO <- file.path(BASE_DIR, "02_phylogenies", "01b_30AX_ML_ASTRAL", "30AX_ASTRAL_ML_species.tree")
GENETREES_NUDNA <- file.path(BASE_DIR, "02_phylogenies", "01b_30AX_ML_ASTRAL", "ml_best.trees")  # Using NUDNA as specified
MTDNA_PHYLO <- file.path(BASE_DIR, "02_phylogenies", "02a_mtDNA_phylogeny", "trees", "MtDNA_concat.tree" )
GENETREES_MTDNA <- file.path(BASE_DIR, "02_phylogenies", "02a_mtDNA_phylogeny", "MtDNA_loci.treefile")  # Using NUDNA as specified
INPUTS <- file.path(BASE_DIR, "01_initial_data", "input_files", "SNaQ_NANUQ")
MSC_RESULTS <- file.path(BASE_DIR, "09_Network_Analyses")
# 4. Create/navigate to results directory based on group name
group_dir <- file.path(MSC_RESULTS, group)
if (!dir.exists(group_dir)) {
dir.create(group_dir, recursive = TRUE)
}
# 5. Load input files
setwd(INPUTS)
